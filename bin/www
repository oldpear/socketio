#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chat:server');
var http = require('http');
var fs = require('fs');

//1.3.3需要require('socket.io')(),后面要加一个括号
var io = require('socket.io')();

var nicknames = [];

/**
 * Get port from environment and store in Express.
 */

var port = parseInt(process.env.PORT, 10) || 8000;
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
var ip;
fs.readFile('ip.conf','utf8',function(err,data){
	if(!err){
		ip=data;
		console.log('ip='+ip);
    	}else{
		throw err;
    	}
});

server.listen(port,ip,function() {
    	console.log('Listening on port %d', server.address().port);
});
//server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

io.attach(server,{serveClient:true});

/**
 * Added by Leon for conduct the socket connection
 */
//console.log('test');

//io.socket.on('connection',function(socket){  //io.on和io.socket.on一样
io.on('connection',function(socket){
  	//console.log('test in the io.on');
  	socket.emit('welcome',{text:'oh,Hi!U r connected!'});
  	socket.on('nickname',function(data,callback){
		//console.log('The server received the following nickname:'+data);
		if(nicknames.indexOf(data) !== -1){
			callback(false);
		}else{
			callback(true);
			nicknames.push(data);
			socket.nickname = data;
			console.log('add-nickename: Nicknames are '+nicknames);
			io.sockets.emit('nicknames',nicknames);
		}
	});
  	socket.on('user message', function (data) {
    		io.sockets.emit('user message', {
      			nick: socket.nickname,
      			message: data
    		});
  	});
  	socket.on('disconnect',function(){
		console.log('get disconnect event');
    		if(!socket.nickname) return;
    		if(nicknames.indexOf(socket.nickname) > -1){
			nicknames.splice(nicknames.indexOf(socket.nickname),1);
    		}
    		console.log('Disconnect: Nicknames are '+nicknames);
  	});
});

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error('Port ' + port + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error('Port ' + port + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  debug('Listening on port ' + server.address().port);
}
